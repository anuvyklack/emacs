#+title: Emacs configuration with Org Mode
#+author: Yuriy Artemyev
#+email: anuvyklack@gmail.com
#+property: header-args :tangle "./init.el" :results silent
#                       :tangle (identity user-init-file)

* Preamble
I'm trying to follow Emacs conventions, good Emacs Lisp file starts with
commentary:

#+begin_src emacs-lisp
;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-
;;;
;;; Commentary:
;;; Emacs config by Yuriy Artemyev.
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in .config/emacs/README.org
;;;
;;; Code:
#+end_src

At  this point  configurations  will be  split  in different  sections
grouped by something common to them all.

* Initial Setup
Emacs starts fast, but as amount of packages grows it gets slower. The
init time is important  because I like to close it  when I'm not using
it. I'm not  closing and opening it  for every file, or  like every 15
minutes, but still, the faster it starts - the better for me.

** =early-init.el=
:properties:
:header-args+: :tangle "./early-init.el"
:end:
These settings are going into  different init file: =earli-init.el=.  We
are going to use some speedup tricks from [[https://github.com/hlissner/doom-emacs][doom-emacs]] here.  But before
that, let's add top comment:

#+begin_src emacs-lisp
  ;;; early-init.el --- early configurations -*- lexical-binding: t; buffer-read-only: t; no-byte-compile: t -*-
  ;;;
  ;;; Commentary:
  ;;; Emacs confi by Andrey Orst.
  ;;; This file was automatically generated by `org-babel-tangle'.
  ;;; Do not change this file.  Main config is located in .config/emacs/README.org
  ;;;
  ;;; Code:
#+end_src

*** Garbage Collection
The main problem  with Emacs startup is garbage  collection system. It
is invoked so many times on startup that it causes quite big impact on
startup time.   We're talking  /seconds/.  One can  raise limit  when to
trigger garbage collection, but this will end up in unpleasant editing
experience. So I'm  declaring these variables to  store default values
for the GC, to restore them after initialization is finished:

#+begin_src emacs-lisp
  (defvar aorst--gc-cons-threshold gc-cons-threshold)
  (defvar aorst--gc-cons-percentage gc-cons-percentage)
  (defvar aorst--file-name-handler-alist file-name-handler-alist)
#+end_src

Now we can tweak CG. We need to raise threshold to prevent it running:

#+begin_src emacs-lisp
  (setq-default gc-cons-threshold 402653184
                gc-cons-percentage 0.6
                inhibit-compacting-font-caches t
                message-log-max 16384
                file-name-handler-alist nil)
#+end_src

Then we need  a hook that restores initial  values once initialization
done:

#+begin_src emacs-lisp
  (add-hook 'after-init-hook
            (lambda ()
              (setq gc-cons-threshold aorst--gc-cons-threshold
                    gc-cons-percentage aorst--gc-cons-percentage
                    file-name-handler-alist aorst--file-name-handler-alist)))
#+end_src

*** Native Compiled Emacs Lisp
There's a  very interesting project  that I'm currently  using, called
[[http://akrl.sdf.org/gccemacs.html][gccemacs]]. It  provides a way to  compile Emacs Lisp into  native code,
thus making  Emacs much more  robust and  snappy. In order  to compile
everything that Emacs loads asynchronously we can set this variable to
=true=.

#+begin_src emacs-lisp
  (defvar comp-deferred-compilation)
  (setq comp-deferred-compilation t)
#+end_src

This way  I can compile  Emacs from source as  I usually do,  and then
continue using it as normal, and Emacs will do it's native compilation
in background for every loaded package. That's amazing!

*** User Interface
Prevent the glimpse of un-styled  Emacs by disabling these UI elements
early.

#+begin_src emacs-lisp
  (setq initial-frame-alist '((width . 170)
                              (height . 56)
                              (tool-bar-lines . 0)
                              (left-fringe . 0)
                              (right-fringe . 0)
                              (bottom-divider-width . 0)
                              (right-divider-width . 1))
        default-frame-alist initial-frame-alist)
#+end_src

Resizing frame is also expensive so we inhibit it, and latest patch to
Emacs  introduced =x-gtk-resize-child-frames=  variable  that fixes  the
issue  with  child frames  not  being  resized correctly  under  GNOME
Shell, so let's set it to =resize-mode=.

#+begin_src emacs-lisp
  (setq frame-inhibit-implied-resize t
        x-gtk-resize-child-frames 'resize-mode)
#+end_src

*** =straight.el=
Straight is an alternative way  to manage package installations. It is
a purely  functional package  manager. It  installs packages  from Git
repositories listed on ELPA and MELPA, or from Git URL. First, we have
to bootstrap it:

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (defvar straight-repository-branch)
  (setq straight-repository-branch "develop")
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

Now we can install =use-package= with it:

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (defvar straight-use-package-by-default)
  (setq straight-use-package-by-default t)
#+end_src

*** early =package.el= settings
=package.el= initialization is expensive so we disable it at startup:

#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
#+end_src

*** =(provide 'early-init)=
This concludes the =early-init.el= file.

#+begin_src emacs-lisp
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

*** Loading =early-init.el= in Emacs 26 and earlier
:properties:
:header-args+: :tangle "./init.el"
:end:
Before Emacs  27 there were  no such thing  as =eraly-init.el=, so  if I
will use  older Emacs  with this configuration  it will  miss settings
that are done there. This code manually loads this file in such case:

#+begin_src emacs-lisp
  (unless (featurep 'early-init)
    (load (expand-file-name "early-init" user-emacs-directory)))
#+end_src


* Fix elpa archive bug in emacs version under 26.3.
#+begin_src emacs-lisp
(if (version< emacs-version "26.3")
    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
#+end_src

* Bootstrap straight.el package manager

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

Make ~:straight t~ in ~use-package~ to be assumed unless you
explicitly override it with ~:straight nil~.

#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
#+end_src

Allow navigation between use-package stanzas with imenu. This has to
be set before loading use-package.

#+begin_src emacs-lisp
  (defvar use-package-enable-imenu-support t)
#+end_src

Install and setup ~use-package~:

#+begin_src emacs-lisp
  (straight-use-package '(use-package :depth 1))

  (setq
   use-package-verbose t  ;; say when package is loaded
   custom-safe-themes t)
#+end_src

* Defaults
Better-defaults:
#+BEGIN_SRC emacs-lisp
(use-package better-defaults
  :straight t)
#+END_SRC

Any Customize-based settings would be saved in =custom.el= file.
#+BEGIN_SRC emacs-lisp
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file 'noerror)
#+END_SRC

Always select the help window.
#+BEGIN_SRC emacs-lisp
(setq help-window-select t)
#+END_SRC

Turn off annoying bell sound.
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
;; (setq visible-bell t)  ;; visual bell (no beeps)
#+END_SRC

Use UTF-8 everywhere
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package gnu-elpa-keyring-update
  :straight t)
#+END_SRC

* Modeline
** Default
Show column number in modeline:

#+begin_src emacs-lisp
(setq column-number-mode t)
#+end_src

** COMMENT Powerline

#+begin_src emacs-lisp
(use-package powerline
  :config
  ;; :init
  (powerline-default-theme)
)
#+end_src

#+begin_src emacs-lisp
(use-package airline-themes
  :after powerline
  :config
  (load-theme 'airline-gruvbox-dark t)
)
#+end_src

** COMMENT Doom-modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+end_src

* Plugins
** Org

Install the newer version of org-mode than the one build in in emacs.
If install org-mode by =straight.el= with =:depth 1= than straight.el
clone it in =org-mode= directory instead of =org= and org-mode can't
fine it self.

#+begin_src emacs-lisp
  ;; (use-package org
  ;;   :straight t)
  ;; (straight-use-package '(org :depth 1))
  ;; (straight-use-package 'org)
#+end_src

List of additional LaTeX packages:

#+begin_src emacs-lisp
  ;; (add-to-list 'org-export-latex-packages-alist '("" "cmap" t))
  ;; (add-to-list 'org-export-latex-packages-alist '("english,russian" "babel" t))
#+end_src

[[https://emacs.stackexchange.com/questions/2086/org-mode-prevent-editing-of-text-within-collapsed-subtree][Prevent editing of text within collapsed subtree:]]
#+begin_src emacs-lisp
  (setq-default org-catch-invisible-edits 'smart)
#+end_src

Hide the emphasis markup (e.g. /.../ for italics, *...* for bold, etc.):
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)
#+end_src

Set up a font-lock substitution for "-" list markers by replacing them with a centered-dot character:
#+begin_src emacs-lisp
(font-lock-add-keywords 'org-mode
                        '(("^ *\\([-]\\) "
                           (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) ""))))))
#+end_src

The org-bullets package replaces all headline markers with different Unicode bullets:
#+begin_src emacs-lisp
  (use-package org-bullets
    :straight (::depth 1)
    ;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    :hook (org-mode . org-bullets-mode)
    :config
    ;; (setq org-bullets-bullet-list '("◉" "⁑" "⁂" "❖" "✮" "✱" "✸"))
  )
#+end_src

Display the buffer in the indented view. Text lines that are not
headlines are prefixed with virtual spaces to vertically align with
the headline text:

Use the mode hook for the major mode to enable this buffer-local minor
mode in org-mode buffers.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

Use lowercase org envoronments. The variable that controls this is ~org-structure-template-alist~
#+begin_src emacs-lisp
(mapc (lambda (arg) (setcdr arg (list (downcase (cadr arg)))))
      org-structure-template-alist)
#+end_src

** Undo-tree
#+begin_src emacs-lisp
;; (use-package undo-tree
;;   :straight t
;; )
#+end_src

** Evil
*** Evil
#+begin_src emacs-lisp
(use-package evil
  :straight (:depth 1)
  :init ;; tweak evil's configuration before loading it
  (setq evil-search-module 'evil-search)
  (setq evil-ex-complete-emacs-commands nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-shift-round nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-keybinding nil)
  ;; (setq evil-want-integration nil)
  :config ;; tweak evil after loading it
  (evil-mode 1)

  ;; example how to map a command in normal mode (called 'normal state' in evil)
  (define-key evil-normal-state-map (kbd ", w") 'evil-window-vsplit)
)
#+end_src

*** Evil-commentary

#+begin_src emacs-lisp
;; Use `gc{motion}` to comment target or `gcc` to comment line.
(use-package evil-commentary
  :after evil
  :straight (:depth 1)
  :config
  (evil-commentary-mode)
)
#+end_src

*** Evil-collection

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :straight (:depth 1)
    ;; :straight (drag-stuff :type git :host github :repo "rejeep/drag-stuff.el"
    ;;                     :fork (:host github
    ;;                            :repo "your-name/el-patch")))
    :config
    (evil-collection-init))
#+end_src

*** evil-org-mode

#+begin_src emacs-lisp

  ;; (use-package evil-org
  ;;   :straight (:depth 1)
  ;;   :after org
  ;;   :config
  ;;   (add-hook 'org-mode-hook 'evil-org-mode)
  ;;   (add-hook 'evil-org-mode-hook
  ;;             (lambda () (evil-org-set-key-theme)))
  ;;   (require 'evil-org-agenda)
  ;;   (evil-org-agenda-set-keys)
  ;;   sdsfga
  ;;   (setq org-special-ctrl-a/e t)
  ;; )

#+end_src

** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
   :straight (:depth 1)
   :config
   (dashboard-setup-startup-hook))
#+END_SRC
** COMMENT Neotree

#+begin_src emacs-lisp
(use-package neotree
  :straight t
  :config
  (global-set-key [f8] 'neotree-toggle))
#+end_src

** COMMENT Move lines (Drag Stuff)

#+begin_src emacs-lisp
(use-package drag-stuff
  :straight t
  :config
  ;; (drag-stuff-mode t)
  (drag-stuff-global-mode 1)
  ;; Activate the suggested key-bindings, <M-up>, <M-down>, <M-right>, <M-left>
  (drag-stuff-define-keys)
)
#+end_src

** Another plugins
#+BEGIN_SRC emacs-lisp
  ;; ;; Show evil marks inside text
  ;; (use-package evil-visual-mark-mode
  ;;   :straight t
  ;;   :after evil
  ;;   :config
  ;;   (evil-visual-mark-mode)
  ;; )

  (use-package evil-fringe-mark
    :straight t
    :config
    (global-evil-fringe-mark-mode)

    ;; Use left fringe
    (setq-default left-fringe-width 16)
    (setq-default evil-fringe-mark-side 'left-fringe)
  )

  (use-package posframe
    :straight t)

  (use-package evil-owl
    :straight t
    :after posframe
    :config
    (setq evil-owl-display-method 'posframe
          evil-owl-extra-posframe-args '(:width 50 :height 20)
          evil-owl-max-string-length 50)
    (evil-owl-mode))

  (use-package helpful
    :straight t
    :config
    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    (global-set-key (kbd "C-h f") #'helpful-callable)

    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)

    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes.
    (global-set-key (kbd "C-c C-d") #'helpful-at-point)

    ;; Look up *F*unctions (excludes macros).
    ;;
    ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
    ;; already links to the manual, if a function is referenced there.
    (global-set-key (kbd "C-h F") #'helpful-function)

    ;; Look up *C*ommands.
    ;;
    ;; By default, C-h C is bound to describe `describe-coding-system'. I
    ;; don't find this very useful, but it's frequently useful to only
    ;; look at interactive functions.
    (global-set-key (kbd "C-h C") #'helpful-command)

  )
#+END_SRC

* Settings

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode 1)
#+END_SRC

* Functions

#+BEGIN_SRC emacs-lisp
;;; init.el ends here
#+END_SRC


* Vim/Evil notes
** Window managment

=C-w hjkl=               move to the window on the left / down / up / right

* Emacs notes
** Key Bindings

=C-x c=                  exit emacs

*** Window and buffer managment

|-----------+---------------------|
| =C-x C-s= | save buffer         |
|-----------+---------------------|
| =C-x B=   | ~ido-switch-buffer~ |
|           | list buffers        |
|-----------+---------------------|
| =C-x C-b= | ~ibuffer~           |
|-----------+---------------------|

Functions:
 - ~ibuffer~
 - ~buffer-menu~

** Help
*** Table

|-------+-------------------------------------------------------|
| =C-h v= | ~M-x describe-variable~                                 |
|       | Display documentation of variable.                    |
|-------+-------------------------------------------------------|
| =C-h f= | ~M-x describe-function~                                 |
|       | Display documentation of function.                    |
|-------+-------------------------------------------------------|
| =C-h k= | ~M-x describe-key~                                      |
|       | Display documentation of function invoke by key.      |
|-------+-------------------------------------------------------|
| =C-h m= | ~M-x describe-mode~                                     |
|       | Display documentation of current major mode and minor |
|       | modes.                                                |
|-------+-------------------------------------------------------|
| =C-h b= | ~M-x describe-bindings~                                 |
|       | Показать все клавиатурные комбинации в буфере.        |
|-------+-------------------------------------------------------|

|-------+-------------------+--------------------------------------------------------------|
| =C-h v= | ~describe-variable~ | Display documentation of variable.                           |
|-------+-------------------+--------------------------------------------------------------|
| =C-h f= | ~describe-function~ | Display documentation of function.                           |
|-------+-------------------+--------------------------------------------------------------|
| =C-h k= | ~describe-key~      | Display documentation of function invoke by key.             |
|-------+-------------------+--------------------------------------------------------------|
| =C-h m= | ~describe-mode~     | Display documentation of current major mode and minor modes. |
|-------+-------------------+--------------------------------------------------------------|
| =C-h b= | ~describe-bindings~ | Показать все клавиатурные комбинации в буфере.               |
|-------+-------------------+--------------------------------------------------------------|

*** Vim style

C-h v                    ~M-x describe-variable~
                         Display documentation of variable.

C-h f                    ~M-x describe-function~
                         Display documentation of function.

C-h k                    ~M-x describe-key~
                         Display documentation of function invoke by key.

C-h m                    ~M-x describe-mode~
                         Display documentation of current major mode and minor
                         modes.

C-h b                    ~M-x describe-bindings~
                         Показать все клавиатурные комбинации в буфере.

*** Plain Lists

- =C-h v=       ::          ~M-x describe-variable~
                         Display documentation of variable.

- =C-h f=       ::          ~M-x describe-function~
                         Display documentation of function.

- =C-h k=       ::          ~M-x describe-key~
                         Display documentation of function invoke by key.

- =C-h m=       ::          ~M-x describe-mode~
                         Display documentation of current major mode and minor
                         modes.

- =C-h b=       ::          ~M-x describe-bindings~
                         Показать все клавиатурные комбинации в буфере.

** Org-mode
*** Headers
+ =TAB= ::                 Subtree cycling: Rotate current subtree among the states
                         :       ┌─> FOLDED -> CHILDREN -> SUBTREE ──┐
                         :       └───────────────────────────────────┘
                         When called with Shift key, global cycling is invoked.

+ =S-Tab= ::               Global cycling: Rotate the entire buffer among the states
                         :     ┌─> OVERVIEW -> CONTENTS -> SHOW ALL ──┐
                         :     └──────────────────────────────────────┘

+ =M-RET= ::               Insert new heading with same level as current.

+ =M-RET Tab= ::           In a new entry with no text yet, TAB cycles through
                         reasonable levels.

+ =M-h / M-l= (evil-collection) :: Promote or demote current heading.
+ =M-Left / M-Right= ::    Promote or demote current heading.

+ =C-RET= ::               Insert headin on the same level.
